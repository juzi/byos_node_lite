<style>
    div.display {
        /*display: flex;*/
        backgroundColor: '#fff';
        font-color: '#000';
        font-family: "LiberationSans", sans-serif;
    }

    div.sugaranddelta {
        display: grid;
        grid-template-columns: 350px 100px 120px 220px;
        grid-gap: 20px;
        width: 100%;
    }

    div.sugar {
        font-size: 210px;
        font-weight: bold;
        text-align: center;
        padding-left: 40px;
    }

    div.sign {
        font-size: 100px;
	font-weight: bolder;
	text-align: right;
        padding-left: 40px;
        padding-top: 70px;
        padding-right: 0;
        margin-right: 0;
    }

    div.delta {
        font-size: 100px;
	font-weight: bolder;
        padding-top: 70px;
        padding-right: 55px;
    }

    div.arrow {
        font-size: 130px;
        font-weight: 500;
        padding-top: 50px;
    }


    div.timeandgraph {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-gap: 10px9
        width: 100%;
        padding-left: 30px;
        font-weight: bold;
    }


    div.age {
        font-size: 100px;
        padding-top: 25px;
        padding-left: 30px;
    }

    div.graph {
        width: 400px;
        padding: 10px;
    }

    /*canvas {*/
    /*    max-height: 200px;*/
    /*}*/
</style>
<div class="screen">
    <div class="view view--full">
        <div class="display">
            <div class="sugaranddelta">
                <div class="grid-child sugar">
                    <text>{{ sugar }}</text>
                </div>
                <div class="grid-child sign">
                    <text>{{ sign }}</text>
                </div>
                <div class="grid-child delta">
                    <text>{{ delta }}</text>
                </div>
                <div class="grid-child arrow">
                    <text>{{ arrow }}</text>
                </div>
            </div>
            <div class="timeandgraph">
                <div class="grid-child age">
                    <text>{{ age }} min</text>
                </div>
                <div class="grid-child graph">
                    <canvas id="glucoseChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Your JSON data


    function parseGlucoseData(data) {
        // Sort by date (oldest first) and extract values
        const sorted = data.result
            .filter(r => r.isValid)
            .sort((a, b) => a.date - b.date);
        const labels = sorted.map(r => {
            const d = new Date(r.date);
            return d.toLocaleTimeString('de-AT', {
                hour: '2-digit',
                minute: '2-digit'
            });
        });

        const values = sorted.map(r => r.sgv);

        return {labels, values};
    }

    function createChart(labels, values) {
        const ctx = document.getElementById('glucoseChart').getContext('2d');

        Chart.defaults.font.size = 24;
        Chart.defaults.font.weight = 'bold';


        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    data: values,
                    borderColor: '#000',
                    backgroundColor: 'rgba(255, 255, 255, 1.0)',
                    borderWidth: 3,
                    tension: 0.6,
                    fill: false,
                    pointRadius: 3
                }]
            },
            options: {
                animation: {
                    duration: 0
                },
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        min: Math.floor(Math.min(...values) / 10) * 10,
                        max: Math.ceil(Math.max(...values) / 10) * 10,
                    },
                    x: {
                        display: false
                    }
                }
            }
        });
    }

    function drawGraph() {
        const jsonData = {{ rawEntries }};

        // Initialize the chart
        const {labels, values} = parseGlucoseData(jsonData);

        createChart(labels, values);
    }

    drawGraph();
</script>
</body>
</html>