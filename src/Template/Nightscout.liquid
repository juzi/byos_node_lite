<style>
    @font-face {
        font-family: 'LiberationSans';
        font-weight: normal;
        font-style: normal;
        font-display: block;
    }

    div.display {
        background: #fff;
        color: #000;
        font-family: "LiberationSans", sans-serif;
        display: grid;
        grid-template-columns: 100px 100px 100px 100px 100px 100px 100px 100px;
        grid-template-rows: 100px 100px 100px 100px;
        grid-gap: 20px;
    }

    div.sugar {
        grid-column: 1 / span 3;
        grid-row: 1 / span 2;
        width: 350px;
        font-size: 210px;
        font-weight: bold;
        text-align: center;
        padding-left: 40px;
    }

    div.sign {
        grid-column: 4;
        grid-row: 1 / span 2;
        width: 100px;
        font-size: 100px;
        font-weight: bolder;
        text-align: right;
        padding-left: 50px;
        padding-top: 70px;
        padding-right: 0;
        margin-right: 0;
    }

    div.delta {
        grid-column: 5 / span 1.5;
        grid-row: 1 / span 2;
        width: 100px;
        font-size: 100px;
        font-weight: bolder;
        text-align: left;
        padding-top: 70px;
    }

    div.arrow {
        grid-column: 6.5 / span 1.5;
        grid-row: 1 / span 2;
        width: 300px;
        font-size: 125px;
        font-weight: 500;
        padding-top: 40px;
    }


    div.age-and-battery {
        display: grid;
        grid-column: 1 / span 3;
        grid-row: 3 / span 2;
        grid-template-columns: 150px 150px;
        grid-template-rows: 100px 100px;
        grid-gap: 40px;
        width: 100%;
        padding-left: 30px;
        font-weight: bold;
    }

    div.age {
        grid-column: 1 / span 2;
        grid-row: 1;
        font-size: 100px;
        padding-left: 30px;
    }

    div.iob {
        grid-column: 1;
        grid-row: 2;
        font-size: 30px;
        padding-top: 5px;
        padding-left: 30px;
    }

    /*.iob-and-battery {*/
    /*    grid-column: 1;*/
    /*    grid-row: 2;*/
    /*    padding-top: 10px;*/
    /*    !*padding-left: 30px;*!*/
    /*}*/

    .battery {
        grid-column: 2;
        grid-row: 2;
        border: 3px solid #333;
        width: 25px;
        height: 36px;
        padding: 2px;
        border-radius: 4px;
        position: relative;
        /*margin: 15px 0 0 80px;*/

        &:before {
            content: '';
            height: 3px;
            width: 16px;
            background: #000;
            display: block;
            position: absolute;
            top: -6px;
            border-radius: 4px 4px 0 0;
        }

        &:after {
            content: '';
            display: block;
            position: absolute;
            top: -1px;
            left: -1px;
            right: -1px;
            bottom: -1px;
            border: 1px solid #fff;
            border-radius: 2px;
        }
    }

    .battery-level {
        background: #000;
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;

        &.alert {
            background-color: #000;

            &:before {
                background-image: url('data:image/svg+xml;charset=US-ASCII,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22utf-8%22%3F%3E%3C!DOCTYPE%20svg%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20SVG%201.1%2F%2FEN%22%20%22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cg%3E%3C%2Fg%3E%20%3Cpath%20fill%3D%22%23e81309%22%20d%3D%22M17.927%2012l2.68-10.28c0.040-0.126%200.060-0.261%200.060-0.4%200-0.726-0.587-1.32-1.314-1.32-0.413%200-0.78%200.187-1.019%200.487l-13.38%2017.353c-0.18%200.227-0.287%200.513-0.287%200.827%200%200.733%200.6%201.333%201.333%201.333h8.073l-2.68%2010.28c-0.041%200.127-0.060%200.261-0.060%200.4%200.001%200.727%200.587%201.32%201.314%201.32%200.413%200%200.78-0.186%201.020-0.487l13.379-17.353c0.181-0.227%200.287-0.513%200.287-0.827%200-0.733-0.6-1.333-1.333-1.333h-8.073z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E');
                background-repeat: no-repeat;
                background-size: 18px;
                height: 18px;
                width: 18px;
                margin: -23px 0 0 1px;
                content: '';
                display: inline-block;
                position: absolute;
            }
        }
    }

    text.batterytext {
        font-size: 30px;
        vertical-align: center;
        padding-top: 0;
        padding-left: 40px;
        padding-bottom: 5px;
    }

    div.graph {
        grid-column: 4 / span 5;
        grid-row: 3 / span 2;
        width: 450px;
        padding: 10px;
    }

    /*canvas {*/
    /*    max-height: 200px;*/
    /*}*/
</style>
<div class="screen">
    <div class="view view--full">
        <div class="display">
            <div class="grid-child sugar">
                <text>{{ sugar }}</text>
            </div>
            <div class="grid-child sign">
                <text>{{ sign }}</text>
            </div>
            <div class="grid-child delta">
                <text>{{ delta }}</text>
            </div>
            <div class="grid-child arrow">
                <text>{{ arrow }}</text>
            </div>

            <div class="grid-child age-and-battery">
                <div class="grid-child age">
                    <text>{{ age }} min</text>
                </div>
                <div class="grid-child iob">
                    <text>{{ iob }}U</text>
                </div>
                <div class="grid-child battery">
                    <div class="battery-level {{ alert }}" style="height:{{ battery }}%;"></div>
                    <text class="batterytext">{{ battery }}%</text>
                </div>
            </div>

            <div class="grid-child graph">
                <canvas id="glucoseChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script>
    function parseGlucoseData(data) {
        // Sort by date (oldest first) and extract values
        const sorted = data.sort((a, b) => a.timestamp - b.timestamp);
        const labels = sorted.map(r => {
            const d = new Date(r.timestamp);
            return d.toLocaleTimeString('de-AT', {
                hour: '2-digit',
                minute: '2-digit'
            });
        });

        const values = sorted.map(r => r.smoothed);
        return {labels, values};
    }

    function createChart(labels, values) {
        const ctx = document.getElementById('glucoseChart').getContext('2d');

        Chart.defaults.font.size = 24;
        Chart.defaults.font.weight = 'bold';

        const minValue = Math.min(...values);
        const maxValue = Math.max(...values);
        const min = 30;
        const max = (Math.max(180, Math.ceil(maxValue / 10) * 10 + 10))

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    data: values,
                    borderColor: '#000',
                    backgroundColor: 'rgba(255, 255, 255, 1.0)',
                    borderWidth: 3,
                    tension: 0.6,
                    fill: false,
                    pointRadius: 3
                }]
            },
            options: {
                animation: {
                    duration: 0
                },
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: false
                    },
                    annotation: {
                        drawTime: "afterDraw",
                        annotations: [{
                            id: "line70",
                            type: "line",
                            mode: "horizontal",
                            scaleID: "y",
                            value: 70,
                            borderWidth: 2,
                            borderColor: "#000000",
                            borderDash: [2, 4],
                        }, {
                            id: "line180",
                            type: "line",
                            mode: "horizontal",
                            scaleID: "y",
                            value: 180,
                            borderWidth: 2,
                            borderColor: "#000000",
                            borderDash: [2, 4],
                        }]
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        min: min,
                        max: max,
                    },
                    x: {
                        display: false
                    }
                }
            }
        });
    }

    function drawGraph() {
        const smoothedData = {{ rawEntries }};

        // Initialize the chart
        const {labels, values} = parseGlucoseData(smoothedData);

        createChart(labels, values);
    }

    drawGraph();
</script>
</body>
</html>